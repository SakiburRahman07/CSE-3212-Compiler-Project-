using std.h

func add() {
    int a, b;
    a = 10;
    b = 20;
    return a + b;    # Should return 30
}

func multiply() {
    int x;
    x = 5 * 4;    # Should return 20
    return x;
}

func square() {
    float y;
    y = 5.5 * 5.5;    # Should return 30.25
    return y;
}

start() {
    print("---------------------Function Test------------------");
    add();

    print("---------------------Character Variable Test------------------");
    char c;
    c = @a@;
    print(c);

    print("---------------------String Variable Test------------------");
    string str;
    str = "Hello World";
    print(str);
    
    print("---------------------Mathematical Operations Test------------------");
    float x, y, z;
    x = 16;
    
    print("---------------------Power Operator Test------------------");
    y = x ^ 2;    # Should be 256
    print(y);
    
    print("---------------------Modulo Operator Test------------------");
    y = x % 3;    # Should be 1
    print(y);
    
    print("---------------------Square Root Function Test------------------");
    y = sqrt(x);  # Should be 4
    print(y);
    
    print("---------------------Absolute Value Function Test------------------");
    x = -10;
    y = abs(x);   # Should be 10
    print(y);
    
    print("---------------------Logarithm Function Test------------------");
    x = 2.718;    # e (Euler's number)
    y = log(x);   # Should be close to 1
    print(y);
    
    print("---------------------Trigonometric Functions Test------------------");
    x = 1.5708;   # Close to π/2
    y = sin(x);   # Should be close to 1
    print(y);
    y = cos(x);   # Should be close to 0
    print(y);
    y = tan(x);   # Should be a large number
    print(y);
    
    print("---------------------Complex Expression Test------------------");
    x = 3;
    y = 4;
    z = sqrt(x^2 + y^2);  # Pythagorean theorem, should be 5
    print(z);

    print("---------------------Integer Variable Test------------------");
    int var;
    var = 4;
    var = 4*var+2;
    print(var);
    var = 10;

    print("---------------------Float Variable Test------------------");
    float ab, da;
    da = 4.5;
    print(da);
    ab = 6;
    
    print("---------------------Increment/Decrement Test------------------");
    ab++;         # Should be 7
    print(ab);
    ab--;         # Should be 6
    print(ab);
    
    print("---------------------Enhanced If-Else Test------------------");
    int test_var;
    test_var = 5;
    
    # Test arithmetic operations in if block
    if(test_var > 4) {
        test_var = test_var + 10;  # Basic addition
        print(test_var);           # Should print 15
    }
    
    # Test multiple operations in if-else
    if(test_var >= 15) {
        test_var = test_var * 2;   # Multiplication
        test_var = test_var + 5;   # Addition
        print(test_var);           # Should print 35
    } otherwise {
        print("er vitore duklo keno");
        test_var = test_var / 2;   # Division
        print(test_var);
    }
    
    # Test nested arithmetic and conditions
    if(test_var > 30 && test_var < 40) {
        test_var = test_var ^ 2;   # Power operation
        print(test_var);           # Should print 1225
    }
    
    # Test complex arithmetic expressions
    float calc_var;
    calc_var = 10.5;
    
    if(calc_var < 20.0) {
        calc_var = sqrt(calc_var) + abs(test_var - 50);
        print(calc_var);
    }
    
    # Test increment/decrement in conditions
    int counter;
    counter = 1;
    
    if(counter < 5) {
        counter++;
        print(counter);
        if(counter < 3) {
            counter = counter * 2;
            print(counter);
        }
    }
    
    # Test mathematical functions in conditions
    float angle;
    angle = 1.5708;  # π/2
    
    if(sin(angle) > 0.9) {
        angle = cos(angle) + tan(0.5);
        print(angle);
    }
    
    # Test modulo and complex expressions
    int mod_var;
    mod_var = 17;
    
    if(mod_var % 2 == 1) {
        mod_var = (mod_var * 3 + 1) % 10;
        print(mod_var);
    }
    
    # Test string comparisons and operations
    string str1, str2;
    str1 = "Hello";
    str2 = "World";
    
    if(str1 != str2) {
        print("Strings are different");
    }
    
    # Test combined arithmetic and logical operations
    int a, b, c;
    a = 5;
    b = 10;
    c = 15;
    
    if((a + b) > c || (b * 2) == c) {
        c = (a + b) * 2;
        print(c);
        if(c % a == 0) {
            c = c / a;
            print(c);
        }
    }
    
    # Test loop-like behavior using if
    int iterator;
    iterator = 0;
    
    if(iterator < 3) {
        iterator++;
        print(iterator);
        if(iterator < 3) {
            iterator++;
            print(iterator);
            if(iterator < 3) {
                iterator++;
                print(iterator);
            }
        }
    }

    print("---------------------Read Function Test------------------");
    int aa;
    read(aa);
    aa = 100;

    print("---------------------If-Elif-Else Test------------------");
    if(aa<=10){
        print(aa);
    }
    elif(aa==20){
        aa = 2*aa;
        print(aa);
    }
    otherwise{
        aa = 3*aa;
        print(aa);
    }
    
    print("---------------------Built-in Functions Test------------------");
    power(16,2);
    int ax, bx; 
    ax= 33*ab;
    bx= 40/2;
    min(ax, bx);
    max(ax, bx);
    checkprime(29);
    facto(5);

    print("---------------------For Loop Test------------------");
    int i;          # Declare loop variable
    print(i);       # Should print 0 (initialized value)
    i = 1;          # Set initial value
    print(i);       # Should print 1
    from i to 5 inc 1 {
        print(i);   # Should print current value in each iteration (1,2,3,4)
    } 
    print(i);       # Should print final value (5)

    print("---------------------Enhanced For Loop Test------------------");
    int counter;
    counter = 1;
    from counter to 5 inc 1 {
        print(counter);    # Should print values from 1 to 5
    }

    print("---------------------Switch Case Test------------------");
    char ff;
    #ff = |abcd|;
    #print(ff);
    b1 = 30;
    a1 = 20;
    if ( a1 != b1 )
    { 
        if(a1>b1)
        {
           print(a1); 
        }
        otherwise
        {
            print(b1);
        }
    }
    
    switch(z){
        state 1 {
            print(a1);
        }
        complementary{
            print(b1);
        }
    }

    print("---------------------Conditional Operators Test------------------");
    # Test variables for conditions
    int x1, x2, x3;
    float f1, f2;
    
    # Initialize test values
    x1 = 10;
    x2 = 10;
    x3 = 20;
    f1 = 10.5;
    f2 = 20.5;
    
    # Test basic comparison operators
    print("---------------------Basic Comparisons------------------");
    if(x1 == x2) {
        print("Equal operator works: x1 == x2");
    }
    if(x1 != x3) {
        print("Not equal operator works: x1 != x3");
    }
    if(x1 < x3) {
        print("Less than operator works: x1 < x3");
    }
    if(x3 > x1) {
        print("Greater than operator works: x3 > x1");
    }
    if(x1 <= x2) {
        print("Less than or equal works: x1 <= x2");
    }
    if(x3 >= x1) {
        print("Greater than or equal works: x3 >= x1");
    }
    
    # Test logical operators
    print("---------------------Logical Operators------------------");
    if(x1 == x2 && x2 < x3) {
        print("Logical AND works: (x1 == x2 && x2 < x3)");
    }
    if(x1 > x3 || x1 == x2) {
        print("Logical OR works: (x1 > x3 || x1 == x2)");
    }
    if(!(x1 > x3)) {
        print("Logical NOT works: !(x1 > x3)");
    }
    
    # Test type-specific comparisons
    print("---------------------Type Comparisons------------------");
    if(x1 === x2) {
        print("Strict equality works for same type (int === int)");
    }
    if(x1 === f1) {
        print("This shouldn't print: different types (int === float)");
    }
    if(x1 !== f1) {
        print("Strict inequality works for different types (int !== float)");
    }
    
    # Test alternative operators
    print("---------------------Alternative Operators------------------");
    if(x1 <> x3) {
        print("Alternative not equal works: x1 <> x3");
    }
    
    # Test complex conditions
    print("---------------------Complex Conditions------------------");
    if((x1 == x2 && f1 < f2) || !(x3 < x1)) {
        print("Complex condition works: ((x1 == x2 && f1 < f2) || !(x3 < x1))");
    }
    if(x1 <= x2 && (x3 > x1 || f1 < f2) && !(x1 > x3)) {
        print("Nested condition works");
    }

    print("---------------------While Loop Test------------------");
    int w;
    w = 1;
    while(w <= 5) {
        print(w);
        w++;
    }

    print("---------------------Enhanced Function Test------------------");
    multiply();    # Should print: Function multiply called and returned: 20.000000
    square();      # Should print: Function square called and returned: 30.250000
    add();         # Should print: Function add called and returned: 30.000000
}
